<?php

namespace App\Controller\backend;

use App\Entity\Services;
use App\Entity\Solutions;
use App\Field\OneToManyField;
use App\Form\ListType;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\FieldDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CodeEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\Field;
use EasyCorp\Bundle\EasyAdminBundle\Field\FieldTrait;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\LanguageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\SlugField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;

class SolutionsCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Solutions::class;
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            LanguageField::new('lang', 'Язык'),
            IntegerField::new('position', 'Очередность')->onlyOnIndex(),
            TextField::new('mainname', 'Название'),
//            CollectionField::new('cat')
//                ->onlyOnForms()
//                ->setTemplatePath('/backend/list.html.twig')
            CollectionField::new('cat', 'Содержимое категории')
//                ->setEntryType(ListType::class)
//                ->setTemplatePath('/backend/list.html.twig')


        ];
    }

    public function configureActions(Actions $actions): Actions
    {
        $PositionDown = Action::new('PositionDown', '', 'fa fa-arrow-down')
            ->linkToCrudAction('PositionDown');
        $PositionUp = Action::new('PositionUp', '', 'fa fa-arrow-up')
            ->linkToCrudAction('PositionUp');

        return $actions
            ->add(Crud::PAGE_INDEX, Action::DETAIL)
            ->add(Crud::PAGE_INDEX, $PositionDown)
            ->add(Crud::PAGE_INDEX, $PositionUp)
            ->remove(Crud::PAGE_DETAIL, Action::DELETE)
            ;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return parent::configureCrud($crud)->setDefaultSort(['position' => 'ASC']); // TODO: Change the autogenerated stub
    }

    public function PositionUp (AdminContext $context) {
        $id     = $context->getRequest()->query->get('entityId');
        $entityThis = $this->getDoctrine()->getRepository(Services::class)->findOneBy(['id'=>$id]);
        $positionNow = $entityThis->getPosition();
        if ($positionNow>1){
            $entityOther= $this->getDoctrine()->getRepository(Services::class)->findOneBy(['position'=>$positionNow-1]);
            $entityThis->setPosition($positionNow-1);
            $entityOther->setPosition($positionNow);
            $em = $this->getDoctrine()->getManager();
            $em->persist($entityThis);
            $em->flush();
            $em->persist($entityOther);
            $em->flush();
        }
        $url = $this->get(AdminUrlGenerator::class)
            ->setAction(Action::INDEX)
            ->setEntityId($context->getEntity()->getPrimaryKeyValue())
            ->generateUrl();

        return $this->redirect($url);

    }

    public function PositionDown (AdminContext $context) {
        $id = $context->getRequest()->query->get('entityId');
        $entityThis = $this->getDoctrine()->getRepository(Services::class)->findOneBy(['id'=>$id]);
        $positionNow = $entityThis->getPosition();
        $entityOther= $this->getDoctrine()->getRepository(Services::class)->findOneBy(['position'=>$positionNow+1]);
        if ($entityOther){
            $entityThis->setPosition($positionNow+1);
            $entityOther->setPosition($positionNow);
            $em = $this->getDoctrine()->getManager();
            $em->persist($entityThis);
            $em->flush();
            $em->persist($entityOther);
            $em->flush();
        }

        $url = $this->get(AdminUrlGenerator::class)
            ->setAction(Action::INDEX)
            ->setEntityId($context->getEntity()->getPrimaryKeyValue())
            ->generateUrl();

        return $this->redirect($url);

    }
}
